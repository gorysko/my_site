<!DOCTYPE html>
<html>

  <head>
    <title>
  
      Functional Python . Part II 
  
</title>
    <meta charset="utf-8">
    <meta name="description" content="Gorysko">
    <meta name="author" content="Gorysko">
    <meta name="viewport" content="width=device-width, initial-scale=1,
    maximum-scale=1, user-scalable=no">
    <link rel="shortcut icon" href= "/static/favicon.ico">

    <link href='http://fonts.googleapis.com/css?family=Lora' rel='stylesheet' type='text/css'>
    
    <link rel="stylesheet" type="text/css" href="/static/css/style.css">
    
    <link rel="stylesheet" href="/pygments.css">
    <!--[if lt IE 9]>
    <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
  </head>

  <body>
  <div class="container">
    <div class="sidebar">
      <a href="/"><h1>Gorysko</h1></a>
<ul>
  <a href="/about"><li>About</li></a>
  <a href="/portfolio"><li>CV and projects</li></a>
  <a href="http://github.com/gorysko"><li>Github</li></a>
</ul>
    </div>
    <div class="content">
      
  <div class="page">
  <div class="page-header">
    <a href="/python_functional_II"><h1>Functional Python . Part II</h1></a>
    
    <span class="date">Sep 20, 2013</span>
    
  </div>
  <h1>Функції, як об’єкти першого класу</h1>
<p>Ми вже начебто побачили, що функції є обєктами першого клсу в Python - справа в тому , що створивши об’єкт функції lambda - ми привязали наш обєкт до імен foo та namenum  ( все одно , що привязувати до імені стрічку чи число ), але точно так же як і число, чи стрічку можна використовувати без прив’язки до зімнної то ми можемо створювати об’єкт lambda без привязки до змінної - бо ці функції , всього лиш ще одне значення, з якими можна щось зробити :)</p>
<p>Найголовніше, для нас, що ми можемо зробити з об’єктами першого класу - так це передати їх до вбудованих функцій map(), reduce() та filter(). Кожна з цих функцій приймає обєкт функції ( перепрошую за тафталогію ), як перший аргумент
<em> map() застосовує передану функцію до кожного елемнту в переданому списку ( ну може і списків ...) та повертає список результатів.
 <code>map(foo(), [val1,val2,...val])</code>
</em> reduce() застосовує передану функцію до кожного значення в переданому списку і до внутрішнього накопчувачу реультату,наприклад:
  <code>reduce(lambda n,m:n*m, range(1,10))</code> означає 10! .
* filter() застосовує передану функцію до кожного елементу списку і повертає список тих елементів, для яких значення функцієї є істинним.</p>
<p>Комбінуючи три цих вбудованих функції ми можемо уникати statements, а використовувати лише вислови з цимифункціями. </p>
<h1>Функціональні цикли в Python</h1>
<p>Заміна циклів на вислови є доволі простим ділом, майже таким самим , як і заміна умовних блоків ( блоків управління потоком ). Наприклад for може бути напряму переведеним в map():</p>
<p><code>for e in lst:  func(e)    
map(func,lst)</code></p>
<p>Якщо ж нам треба відтворити виконання послідовних висловів - " зроби це, потім це, а потім ще це", то з використанням map() буде виглядати так:
`
* створимо функцію, яка запускає інші функції ( знову тафталогія )
foo = lambda f: f()</p>
<ul>
<li>нехай f1, f2, f3 будуть нашими функціями </li>
</ul>
<p>map(foo, [f1,f2,f3]) <br />
`
Тобто загалом вся наша програма може бути викликана map() зі списком функцій, які треба послідовно викликати, так як функції ви можете помістити як список - вони ж є об’єктом  :)</p>
<h2>Окремий пункт - цикл while в Python</h2>
<p><code>* стандартний while  
while cond: 
    pre-suite 
    if break_condition: 
        break 
    else: 
        suite 
* функціональний 
def while_block(): 
    pre-suite 
    if break_condition: 
        return 1 
    else: 
        suite 
        return 0 
while_FP = lambda: (cond and while_block()) or while_FP() while_FP()</code>
Цей функціональний варіат все ще не є досконалим - так як він потребує функцію while_block(), яка сама по собі може містити не тільки вислови , але і statements. Ми могли б збочуватися і далі - замінивши if/else на коротко замкнуті висловиб та й звичайна перевірка на місті <cond> , не завжди є корисною так як тіло циклу не може міняти змінні.</p>
  	
        <div id="disqus_thread"></div>
	    <script type="text/javascript">
	        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
	        var disqus_shortname = 'goryskocom'; // required: replace example with your forum shortname

	        /* * * DON'T EDIT BELOW THIS LINE * * */
	        (function() {
	            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
	            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
	            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
	        })();
	    </script>
	    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
	    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
  		</div>
  	

    </div>
  </div>
  </body>
  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-44207957-1', 'gorysko.com');
    ga('send', 'pageview');

  </script>

</html>